// Generated by CoffeeScript 1.8.0
var URI_WHITELIST, applyBaseUrl, clone, getParsedUri, getPathname, isEmpty, omit, pick, qs, url, _ref;

url = require('url');

qs = require('qs');

_ref = require('lodash'), pick = _ref.pick, omit = _ref.omit, clone = _ref.clone, isEmpty = _ref.isEmpty;

getPathname = function(path) {
  return (path != null ? path : '').split('?')[0];
};

applyBaseUrl = function(baseUrl, parsed) {
  var parsedBase, pathPrefix, pathSuffix;
  parsedBase = getParsedUri({
    uri: baseUrl,
    qs: qs.parse(parsed.search.substr(1))
  });
  pathSuffix = parsed.pathname;
  if (pathSuffix) {
    pathPrefix = parsedBase.pathname;
    if (pathPrefix === '/') {
      pathPrefix = '';
    }
    parsedBase.pathname = "" + pathPrefix + pathSuffix;
    parsedBase.path = "" + parsedBase.pathname + parsedBase.search;
  }
  return parsedBase;
};

URI_WHITELIST = ['protocol', 'slashes', 'auth', 'hostname', 'port', 'pathname', 'search', 'href', 'path'];

getParsedUri = function(options) {
  var param, parsed, query, queryParams, value, _ref1;
  parsed = typeof options.uri === 'string' ? url.parse(options.uri) : typeof options.uri === 'object' ? clone(options.uri) : {};
  query = typeof parsed.query === 'string' ? qs.parse(parsed.query) : !parsed.query && typeof parsed.search === 'string' ? qs.parse(parsed.search.substr(1)) : parsed.query != null ? clone(parsed.query) : {};
  delete parsed.query;
  queryParams = (_ref1 = options.qs) != null ? _ref1 : {};
  for (param in queryParams) {
    value = queryParams[param];
    if (value != null) {
      query[param] = value;
    }
  }
  parsed.search = isEmpty(query) ? '' : "?" + (qs.stringify(query));
  if (options.baseUrl && !parsed.protocol) {
    parsed = applyBaseUrl(options.baseUrl, parsed);
  }
  parsed.href = url.format(parsed);
  parsed.path = "" + parsed.pathname + parsed.search;
  return pick(parsed, URI_WHITELIST);
};

module.exports = getParsedUri;
