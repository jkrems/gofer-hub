// Generated by CoffeeScript 1.8.0
var Duplex, HubRequest, Promise, Stats, concat, defaultBodyParser, identity, mime, next, noop, preciseNow, toNull, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Promise = require('bluebird');

Duplex = require('readable-stream').Duplex;

concat = require('concat-stream');

mime = require('mime-types');

_ref = require('lodash'), noop = _ref.noop, identity = _ref.identity;

toNull = function() {
  return null;
};

next = function(ee, event) {
  return new Promise(function(resolve, reject) {
    if (event !== 'error') {
      ee.once('error', reject);
    }
    return ee.once(event, resolve);
  });
};

defaultBodyParser = function(body, response) {
  var contentType, err;
  contentType = response.headers['content-type'];
  switch (mime.extension(contentType)) {
    case 'json':
      if (body.length === 0) {
        return void 0;
      } else {
        try {
          return JSON.parse(body.toString('utf8'));
        } catch (_error) {
          err = _error;
          return Promise.reject(err);
        }
      }
      break;
    default:
      return body;
  }
};

preciseNow = (function() {
  var hrOffset, hrSeconds;
  hrSeconds = function() {
    var nano, seconds, _ref1;
    _ref1 = process.hrtime(), seconds = _ref1[0], nano = _ref1[1];
    return seconds + nano / 1e9;
  };
  hrOffset = Date.now() / 1000 - hrSeconds();
  return function() {
    return hrOffset + hrSeconds();
  };
})();

Stats = (function() {
  function Stats(options) {
    this.requestId = options.requestId;
    this.fetchId = options.fetchId;
    this.method = void 0;
    this.uri = void 0;
    this.requestOptions = void 0;
    this.fetchStart = preciseNow();
    this.connectDuration = void 0;
    this.fetchDuration = void 0;
    this.statusCode = void 0;
  }

  Stats.prototype.toJSON = function() {
    return {
      requestId: this.requestId,
      fetchId: this.fetchId,
      uri: this.uri,
      fetchStart: this.fetchStart,
      connectDuration: this.connectDuration,
      fetchDuration: this.fetchDuration
    };
  };

  Stats.prototype.start = function(requestOptions) {
    this.uri = requestOptions.href;
    this.method = requestOptions.method;
    return this.requestOptions = requestOptions;
  };

  Stats.prototype.completed = function(error, response) {
    var _ref1;
    this.statusCode = (_ref1 = response != null ? response.statusCode : void 0) != null ? _ref1 : error != null ? error.code : void 0;
    this.fetchDuration = preciseNow() - this.fetchStart;
    return this;
  };

  Stats.prototype.connected = function() {
    this.connectDuration = preciseNow() - this.fetchStart;
    return this;
  };

  return Stats;

})();

HubRequest = (function(_super) {
  __extends(HubRequest, _super);

  function HubRequest(options) {
    var _ref1;
    Duplex.call(this);
    this.response = new Promise((function(_this) {
      return function(resolve, reject) {
        _this.on('error', reject);
        return _this.on('response', resolve);
      };
    })(this));
    this.bodyParser = (_ref1 = options.bodyParser) != null ? _ref1 : defaultBodyParser;
    this._errorOrNull = next(this, 'end').then(toNull, identity);
    this.stats = new Stats(options);
  }

  HubRequest.prototype._handleSocket = function(socket) {
    var clearConnectTimedOut, connectTimedOut, connectTimeout, handle;
    connectTimeout = 10;
    connectTimedOut = (function(_this) {
      return function() {
        var err, requestOptions;
        requestOptions = _this.stats.connected().requestOptions;
        err = new Error('ECONNECTTIMEDOUT');
        err.code = 'ECONNECTTIMEDOUT';
        err.message = ("Connecting to " + requestOptions.method + " ") + ("" + requestOptions.href + " timed out after " + connectTimeout + "ms");
        err.responseData = _this.stats;
        return _this._req.emit('error', err);
      };
    })(this);
    handle = setTimeout(connectTimedOut, connectTimeout);
    clearConnectTimedOut = function() {
      return clearTimeout(handle);
    };
    this.once('error', clearConnectTimedOut);
    socket.once('connect', (function(_this) {
      return function() {
        clearConnectTimedOut();
        return _this.emit('connect', _this.stats.connected());
      };
    })(this));
    return this.emit('socket', socket);
  };

  HubRequest.prototype.init = function(_req, requestOptions) {
    this._req = _req;
    this.stats.start(requestOptions);
    this._req.on('error', this.emit.bind(this, 'error'));
    this._req.once('response', (function(_this) {
      return function(response) {
        response.on('data', function(chunk) {
          return _this.push(chunk);
        });
        response.once('end', function() {
          return _this.push(null);
        });
        response.on('error', function(error) {
          return _this.emit('error', error);
        });
        return _this.emit('response', response);
      };
    })(this));
    this._req.once('socket', this._handleSocket.bind(this));
    Promise.all([this._errorOrNull, this.response["catch"](noop)]).done((function(_this) {
      return function(_arg) {
        var error, response;
        error = _arg[0], response = _arg[1];
        _this.stats.completed(error, response);
        return _this.emit('complete', error, response, _this.stats);
      };
    })(this));
    this._write = this._req.write.bind(this._req);
    this.once('finish', (function(_this) {
      return function() {
        return _this._req.end();
      };
    })(this));
    return this.once('error', (function(_this) {
      return function() {
        return _this._req.abort();
      };
    })(this));
  };

  HubRequest.prototype._read = function(size) {};

  HubRequest.prototype.getResponse = function(callback) {
    return this.response.nodeify(callback);
  };

  HubRequest.prototype.getRawBody = function(callback) {
    if (this._rawBody == null) {
      this._rawBody = new Promise((function(_this) {
        return function(resolve, reject) {
          _this.once('error', reject);
          return _this.pipe(concat(resolve));
        };
      })(this));
    }
    return this._rawBody.nodeify(callback);
  };

  HubRequest.prototype.getBody = function(callback) {
    return Promise.all([this.getRawBody(), this.response]).spread(this.bodyParser).nodeify(callback);
  };

  HubRequest.prototype.fail = function(error) {
    setImmediate(this.emit.bind(this, 'error', error));
    return this;
  };

  HubRequest.prototype.then = function(success, error, progress) {
    return this.getBody().then(success, error, progress);
  };

  HubRequest.prototype.addDataDump = function(callback) {
    return Promise.all([this._errorOrNull, this.getBody()["catch"](noop), this.getResponse()["catch"](noop), this.stats]).nodeify((function(_this) {
      return function(error, results) {
        if (error != null) {
          return callback(error, void 0, void 0, _this.stats);
        }
        return callback.apply(null, results);
      };
    })(this));
  };

  return HubRequest;

})(Duplex);

module.exports = HubRequest;
