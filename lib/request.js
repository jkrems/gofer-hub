/*
Copyright (c) 2014, Groupon, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

Neither the name of GROUPON nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Generated by CoffeeScript 1.8.0

/*
Copyright (c) 2014, Groupon, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

Neither the name of GROUPON nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var Duplex, HubRequest, Promise, Stats, concat, defaultBodyParser, extend, getRangeChecker, identity, memoize, mime, next, noop, preciseNow, testStatusCode, toNull, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Promise = require('bluebird');

Duplex = require('readable-stream').Duplex;

concat = require('concat-stream');

mime = require('mime-types');

_ref = require('lodash'), noop = _ref.noop, identity = _ref.identity, extend = _ref.extend, memoize = _ref.memoize;

toNull = function() {
  return null;
};

next = function(ee, event) {
  return new Promise(function(resolve, reject) {
    if (event !== 'error') {
      ee.once('error', reject);
    }
    return ee.once(event, resolve);
  });
};

defaultBodyParser = function(body, response) {
  var contentType, err;
  contentType = response.headers['content-type'];
  switch (mime.extension(contentType)) {
    case 'json':
      if (body.length === 0) {
        return void 0;
      } else {
        try {
          return JSON.parse(body.toString('utf8'));
        } catch (_error) {
          err = _error;
          return Promise.reject(err);
        }
      }
      break;
    default:
      return body;
  }
};

getRangeChecker = memoize(function(spec) {
  var checkCode, ranges;
  ranges = spec.split(',').map(function(range) {
    var max, min, _ref1;
    _ref1 = range.split('..'), min = _ref1[0], max = _ref1[1];
    min = parseInt(min, 10);
    max = parseInt(max != null ? max : min, 10);
    return [min, max];
  });
  return checkCode = function(code) {
    return ranges.some(function(_arg) {
      var max, min;
      min = _arg[0], max = _arg[1];
      return (min <= code && code <= max);
    });
  };
});

testStatusCode = function(code, spec) {
  return getRangeChecker(spec)(code);
};

preciseNow = (function() {
  var hrOffset, hrSeconds;
  hrSeconds = function() {
    var nano, seconds, _ref1;
    _ref1 = process.hrtime(), seconds = _ref1[0], nano = _ref1[1];
    return seconds + nano / 1e9;
  };
  hrOffset = Date.now() / 1000 - hrSeconds();
  return function() {
    return hrOffset + hrSeconds();
  };
})();

Stats = (function() {
  function Stats(options) {
    this.requestId = options.requestId;
    this.fetchId = options.fetchId;
    this.method = void 0;
    this.uri = void 0;
    this.requestOptions = void 0;
    this.fetchStart = preciseNow();
    this.connectDuration = void 0;
    this.fetchDuration = void 0;
    this.statusCode = void 0;
    this.error = void 0;
  }

  Stats.prototype.toJSON = function() {
    return {
      requestId: this.requestId,
      fetchId: this.fetchId,
      method: this.method,
      uri: this.uri,
      fetchStart: this.fetchStart,
      connectDuration: this.connectDuration,
      fetchDuration: this.fetchDuration,
      syscall: this.syscall,
      statusCode: this.statusCode,
      statusCodeRange: this.statusCodeRange
    };
  };

  Stats.prototype.start = function(requestOptions) {
    this.uri = requestOptions.href;
    this.method = requestOptions.method;
    return this.requestOptions = requestOptions;
  };

  Stats.prototype.completed = function(error, response) {
    var _ref1;
    this.error = error;
    this.statusCode = response != null ? response.statusCode : void 0;
    if (error != null) {
      this.syscall = error.syscall;
      this.statusCodeRange = error.statusCodeRange;
      if (this.statusCode == null) {
        this.statusCode = (_ref1 = error.code) != null ? _ref1 : error.statusCode;
      }
    }
    this.fetchDuration = preciseNow() - this.fetchStart;
    return this;
  };

  Stats.prototype.connected = function() {
    this.connectDuration = preciseNow() - this.fetchStart;
    return this;
  };

  return Stats;

})();

HubRequest = (function(_super) {
  __extends(HubRequest, _super);

  function HubRequest(options) {
    var _ref1;
    Duplex.call(this);
    this.response = new Promise((function(_this) {
      return function(resolve, reject) {
        _this.on('error', reject);
        return _this.on('response', resolve);
      };
    })(this));
    this.bodyParser = (_ref1 = options.bodyParser) != null ? _ref1 : defaultBodyParser;
    this._errorOrNull = next(this, 'end').then(toNull, identity);
    this.stats = new Stats(options);
    this.statusCodeRange = options.statusCodeRange;
    this.connectTimeout = options.connectTimeout;
    this.completionTimeout = options.completionTimeout;
  }

  HubRequest.prototype._handleSocket = function(socket) {
    var clearConnectTimedOut, connectTimedOut, handle;
    connectTimedOut = (function(_this) {
      return function() {
        var err, requestOptions;
        requestOptions = _this.stats.connected().requestOptions;
        err = new Error('ECONNECTTIMEDOUT');
        err.code = 'ECONNECTTIMEDOUT';
        err.message = ("Connecting to " + requestOptions.method + " ") + ("" + requestOptions.href + " timed out after " + _this.connectTimeout + "ms");
        err.responseData = _this.stats;
        return _this._req.emit('error', err);
      };
    })(this);
    if (this.connectTimeout) {
      handle = setTimeout(connectTimedOut, this.connectTimeout);
    }
    clearConnectTimedOut = function() {
      return clearTimeout(handle);
    };
    this.once('error', clearConnectTimedOut);
    socket.once('connect', (function(_this) {
      return function() {
        clearConnectTimedOut();
        return _this.emit('connect', _this.stats.connected());
      };
    })(this));
    return this.emit('socket', socket);
  };

  HubRequest.prototype._handleResponse = function(response) {
    var apiError, rawBody;
    response.on('error', (function(_this) {
      return function(error) {
        return _this.emit('error', error);
      };
    })(this));
    if (testStatusCode(response.statusCode, this.statusCodeRange)) {
      response.on('data', (function(_this) {
        return function(chunk) {
          return _this.push(chunk);
        };
      })(this));
      response.once('end', (function(_this) {
        return function() {
          return _this.push(null);
        };
      })(this));
      return this.emit('response', response);
    }
    apiError = new Error('API Request returned a response outside the status code range ' + ("(code: " + response.statusCode + ", range: [" + this.statusCodeRange + "])"));
    extend(apiError, {
      type: 'api_response_error',
      httpHeaders: response.headers,
      statusCode: response.statusCode,
      statusCodeRange: this.statusCodeRange
    });
    rawBody = new Promise((function(_this) {
      return function(resolve, reject) {
        response.once('error', reject);
        return response.pipe(concat(resolve));
      };
    })(this));
    return Promise.all([rawBody, response]).spread(this.bodyParser)["catch"](noop).done((function(_this) {
      return function(body) {
        _this.emit('error', extend(apiError, {
          body: body
        }));
        return _this.emit('response', response);
      };
    })(this));
  };

  HubRequest.prototype._setupCompletionTimeout = function() {
    var completionTimedOut, handle;
    if (!this.completionTimeout) {
      return;
    }
    completionTimedOut = (function(_this) {
      return function() {
        var err;
        err = new Error('ETIMEDOUT');
        err.code = 'ETIMEDOUT';
        err.message = "Response timed out after " + _this.completionTimeout + "ms";
        return _this.emit('error', err);
      };
    })(this);
    handle = setTimeout(completionTimedOut);
    return this._errorOrNull.done((function(_this) {
      return function() {
        return clearTimeout(handle);
      };
    })(this));
  };

  HubRequest.prototype.init = function(_req, requestOptions) {
    this._req = _req;
    this.stats.start(requestOptions);
    this._req.on('error', this.emit.bind(this, 'error'));
    this._req.once('response', (function(_this) {
      return function(response) {
        return _this._handleResponse(response);
      };
    })(this));
    this._req.once('socket', this._handleSocket.bind(this));
    Promise.all([this._errorOrNull, this.response["catch"](noop)]).done((function(_this) {
      return function(_arg) {
        var error, response;
        error = _arg[0], response = _arg[1];
        _this.stats.completed(error, response);
        return _this.emit('complete', error, response, _this.stats);
      };
    })(this));
    this._write = this._req.write.bind(this._req);
    this.once('finish', (function(_this) {
      return function() {
        return _this._req.end();
      };
    })(this));
    this.once('error', (function(_this) {
      return function() {
        return _this._req.abort();
      };
    })(this));
    return this._setupCompletionTimeout();
  };

  HubRequest.prototype._read = function(size) {};

  HubRequest.prototype.getResponse = function(callback) {
    return this.response.nodeify(callback);
  };

  HubRequest.prototype.getRawBody = function(callback) {
    if (this._rawBody == null) {
      this._rawBody = new Promise((function(_this) {
        return function(resolve, reject) {
          _this.once('error', reject);
          return _this.pipe(concat(resolve));
        };
      })(this));
    }
    return this._rawBody.nodeify(callback);
  };

  HubRequest.prototype.getBody = function(callback) {
    return Promise.all([this.getRawBody(), this.response]).spread(this.bodyParser).nodeify(callback);
  };

  HubRequest.prototype.fail = function(error) {
    setImmediate(this.emit.bind(this, 'error', error));
    return this;
  };

  HubRequest.prototype.then = function(success, error, progress) {
    return this.getBody().then(success, error, progress);
  };

  HubRequest.prototype.addDataDump = function(callback) {
    return Promise.all([this._errorOrNull, this.getBody()["catch"](noop), this.getResponse()["catch"](noop), this.stats]).nodeify((function(_this) {
      return function(error, results) {
        if (error != null) {
          return callback(error, void 0, void 0, _this.stats);
        }
        return callback.apply(null, results);
      };
    })(this));
  };

  return HubRequest;

})(Duplex);

module.exports = HubRequest;
